#! /usr/bin/env python
# -*- coding: utf-8-unix;  -*-
# Above line defines encoding : http://www.python.org/dev/peps/pep-0263/

'''
Copyright (C) 2013 A. Rimoldi <a.l.e@ideale.ch>
                   C. GÃ©my <cedric@cgemy.com>
                   C. Schockaert <R3vLibre@citadels.be>

##This extension draws a typographic grid for use within Scribus documents.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''


## name = Typographic Grid
## title = Typographic Grid
## description = Creates a typographic grid ofr use within Scribus
## subroutine = run
## menu = &Extras

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.uic import loadUi


class ScribusTypoGridUI :

    def __init__(self):
        
        self.window = loadUi(os.path.join(os.path.dirname(__file__), "typographic_grid.ui"))
        self.window.show()
        while self.window.isVisible():
            qApp.processEvents()

class ScribusTypoGrid :

    def __init__(self):
        self.margins = {}
        self.leading = {}
        self.grid = {}
#        self.getParamValues()


    def getParamValues(self, UI):
        """Get values from UI fields"""
        # Get page specification from Scribus Document
        self.page["width"] = "Document.page_width"
        self.page["height"] = "Document.page_heigth"

        # Get values for margins
        self.margins["left"] = "UI.margin_left"
        self.margins["right"] = "UI.margin_right"
        self.margins["top"] = "UI.margin_top"
        self.margins["bottom"] = "UI.margin_bottom"

        # Get values for initial leading interval
        self.leading["initial"] = "UI.initial_leading"
        
        # Get vertical and horizontal grid space definitions
        self.grid["vertical"]["nb_div"] = "UI.grid_vertical_nb_areas * UI.grid_vertical_nb_div_in_areas"
        self.grid["vertical"]["nb_div"] = "UI.grid_horizontal_nb_areas * UI.grid_horizontal_nb_div_in_areas"
        self.grid["vertical"]["spacing"] = "UI.spacing"
        self.grid["horizontal"]["spacing"] = "UI.spacing"


    def setValues(self, page, margins, leading, grid):
        self.page = page
        self.margins = margins
        self.leading = leading
        self.grid = grid

    def calculateGrid(self):
        pos = {}
        pos["start"] = {}
        pos["end"] = {}
        pos["start"]["x"] = self.margins["left"]
        pos["start"]["y"] = self.margins["right"]
        pos["end"]["x"] = self.page["width"] - self.margins["right"]
        pos["end"]["y"] = self.page["height"] - self.margins["bottom"]

        # Compute grid height & width
        self.grid["height"] = (pos["end"]["y"] - pos["start"]["y"])
        self.grid["width"] = (pos["end"]["x"] - pos["start"]["x"])

        # Compute nb of lines based on initial interval
        self.computeBaselineNbAndInterval()


    def computeBaselineNbAndInterval(self):
        """Compute nb of lines based on initial interval."""
        self.grid["nb_baselines"] \
            = int(self.grid["height"] / self.leading["initial"])

        # Then compute resulting leading space resulting in integer nb_baselines
        self.leading["computed_lower"] \
            = self.grid["height"] / (self.grid["nb_baselines"] + 1)

        self.leading["computed_upper"] \
            = self.grid["height"] / self.grid["nb_baselines"]

        # Keep closest resulting computed leading interval
        if (abs(self.leading["computed_upper"] - self.leading["initial"])
            < abs(self.leading["computed_lower"] - self.leading["initial"])):
            self.leading["computed"] = self.leading["computed_upper"]
        else:
            self.leading["computed"] = self.leading["computed_lower"]
        
        

    def describeGridSpec(self):
        """Generate a summary string of grid specifications"""
        gridSpecs = [ ]
        gridSpecs.append("Page:")
        gridSpecs.append("  width = " + str(self.page["width"]))
        gridSpecs.append("  height = " + str(self.page["height"]))
        gridSpecs.append("")
        gridSpecs.append("Margins:")
        gridSpecs.append("  left = " + str(self.margins["left"]))
        gridSpecs.append("  right = " + str(self.margins["right"]))
        gridSpecs.append("  top = " + str(self.margins["top"]))
        gridSpecs.append("  bottom = " + str(self.margins["bottom"]))
        gridSpecs.append("")
        gridSpecs.append("Leading interval:")
        gridSpecs.append("  initial = " + str(self.leading["initial"]))
        gridSpecs.append("  computed = " + str(self.leading["computed"]))
        gridSpecs.append("  computed_lower = " + str(self.leading["computed_lower"]))
        gridSpecs.append("  computed_upper = " + str(self.leading["computed_upper"]))
        gridSpecs.append("")
        gridSpecs.append("Grid:")
        gridSpecs.append("  Vertical:")
        gridSpecs.append("    nb_div = " + str(self.grid["vertical"]["nb_div"]))
        gridSpecs.append("    spacing = " + str(self.grid["vertical"]["spacing"]))
        gridSpecs.append("  Horizontal:")
        gridSpecs.append("    nb_div = " + str(self.grid["horizontal"]["nb_div"]))
        gridSpecs.append("    spacing = " + str(self.grid["horizontal"]["spacing"]))
        gridSpecs.append("  Baseline:")
        gridSpecs.append("    baseline_nb = " + str(self.grid["nb_baselines"]))
        return "\n".join(gridSpecs)


    def createGrid(self):
        print "createGrid: not implemented yet !"
        return


def run(testValues = None):
    # ui = ScribusTypoGridUI()
    scribusTypoGrid = ScribusTypoGrid()
    if testValues:
        scribusTypoGrid.setValues(testValues["page"],
                                  testValues["margins"],
                                  testValues["leading"],
                                  testValues["grid"])
    else:
        scribusTypoGrid.getParamValues()

    scribusTypoGrid.calculateGrid()

    if testValues:
        GridSpec = scribusTypoGrid.describeGridSpec()
        print "Grid Specification:\n" + GridSpec
    else:
        scribusTypoGrid.createGrid()

if __name__ == '__main__':
    run()
